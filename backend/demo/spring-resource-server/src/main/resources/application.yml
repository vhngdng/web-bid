spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 60674483096-p014e3eca264vr8vn6sq14gs12g0qc9g.apps.googleusercontent.com
            client-secret: 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
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_basic
            scope:
              - email
              - profile
#              - openid
              - address
              - phone

#            redirect-uri: http://localhost/web-app/login/oauth2/code/google
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
            user-name-attribute: email
#      resourceserver:
#        jwt:
#          issuer-uri: http://auth-server:9000
# Configuration Properties
app:
#  auth:
#    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
#    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:5173, http://localhost:3000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:5173/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
